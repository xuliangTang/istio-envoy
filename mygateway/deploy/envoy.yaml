apiVersion: v1
kind: Namespace
metadata:
  name: ingress-envoy
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sa-ingress-envoy
  namespace: ingress-envoy
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: role-ingress-envoy
rules:
  - apiGroups: ["extensions", "networking.k8s.io"]
    resources:
      - ingresses
    verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rolebinding-ingress-envoy
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: role-ingress-envoy
subjects:
  - kind: ServiceAccount
    name: sa-ingress-envoy
    namespace: ingress-envoy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy-controller
  namespace: ingress-envoy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy-controller
  template:
    metadata:
      labels:
        app: envoy-controller
    spec:
      serviceAccountName: sa-ingress-envoy
      containers:
        - name: controller
          image: registry.cn-hangzhou.aliyuncs.com/lain-txl/istio-envoy:main
          imagePullPolicy: Always
          env:
            - name: release
              value: "1"
          ports:
            - containerPort: 19000
---
apiVersion: v1
kind: Service
metadata:
  name: envoy-controller-svc
  namespace: ingress-envoy
spec:
  type: ClusterIP
  ports:
    - port: 19000
      targetPort: 19000
  selector:  #service通过selector和pod建立关联
    app: envoy-controller
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-dyn
  namespace: ingress-envoy
data:
  envoy.yaml: |
    admin:
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 9901

    node:
      cluster: test-cluster
      id: test1 # 关联控制面里的nodeID

    dynamic_resources:
      cds_config:
        resource_api_version: V3
        api_config_source:
          api_type: GRPC
          transport_api_version: V3
          grpc_services:
            - envoy_grpc:
                cluster_name: xds_cluster
      lds_config:
        resource_api_version: V3
        api_config_source:
          api_type: GRPC
          transport_api_version: V3
          grpc_services:
            - envoy_grpc:
                cluster_name: xds_cluster

    static_resources:
      clusters:
        - name: xds_cluster
          connect_timeout: 1s
          type: "LOGICAL_DNS"
          http2_protocol_options: {}
          load_assignment:
            cluster_name: xds_cluster
            endpoints:
              - lb_endpoints:
                  - endpoint:
                      address:
                        socket_address:
                          address: "envoy-controller-svc.ingress-envoy.svc.cluster.local"  # 关联控制面服务
                          port_value: 19000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: envoy
  namespace: ingress-envoy
spec:
  replicas: 1
  selector:
    matchLabels:
      app: envoy
  template:
    metadata:
      labels:
        app: envoy
    spec:
      containers:
        - name: envoyproxy
          image: envoyproxy/envoy-alpine:v1.21.0
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: envoyconfig
              mountPath: /etc/envoy/
      volumes:
        - name: envoyconfig
          configMap:
            defaultMode: 0655
            name: envoy-dyn
---
apiVersion: v1
kind: Service
metadata:
  name: envoy-svc
  namespace: ingress-envoy
spec:
  type: NodePort
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 32180
  selector:  #service通过selector和pod建立关联
    app: envoy
